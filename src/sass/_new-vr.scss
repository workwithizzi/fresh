@function convert_rem($num) {
	$unitless: strip_unit($num);
	$convert: ($unitless / $rembase);
	@return $convert + rem;
}

@function convert_rem_ratio($num) {
	$unitless: strip_unit($num);
	$convert: ($unitless / $rembase);
	@return $convert;
}

// https://goo.gl/g36vWQ
@function is-number($value) {
	@return type-of($value) == 'number';
}


// ------------------------------------

$test_base_line_height: 24px;
$baseline-grid: 8px;

// ------------------------------------

// Vertical Rhythm function based on a smaller baseline grid
@function step-vr($val: base, $unit: rem) {
	$base-ratio: convert_rem_ratio($test_base_line_height);

	@if $val == 'info' {
		@debug 'Add info and error handling.';
		@return 1000px;

	} @else if $val == 'base' or $val == 0 {
		@return $base-ratio + $unit;

	} @else if is-number($val) {
		$multiple: $baseline-grid * $val;
		$convert: convert_rem_ratio($multiple);
		@return ($base-ratio + $convert) + $unit;

	} @else {
		@debug 'Need to add error handling.';
		@return 1000px;
	}
}

// ------------------------------------

@function new-vr($val: base, $unit: rem) {
	// Calculate the base line-height
	// $base: $base_font_size * $test_base_line_height;

	// Make sure $base_font_size is unitless
	@if unitless($base_font_size) {
		@debug info-log('Your base font size CANNOT be a unitless number.'
		'Current value is (#{$base_font_size})'
		'@SEE: variable `$base_font_size`');
		// @return 1000px;
	}
	// Make sure $test_base_line_height has a unit
	@if not unitless($test_base_line_height) {
		@debug info-log('Your base line-height MUST be a unitless number.'
		'Current value is (#{$test_base_line_height})'
		'@SEE: variable `$test_base_line_height`');
		// @return 1000px;
	}

	$base-ratio: convert_rem_ratio($test_base_line_height);

	// Info
	@if $val == 'info' {
		@debug $debug_feedback-vr;
		@return 1000px;

	} @else if $val == 'base' or $val == 0 {
		@return $base_font_size * $base-ratio;

	} @else if is-number($val) {
		// $multiple: $base_font_size * $base-ratio * $val;
		// $convert: convert_rem_ratio($multiple);
		// // @return ($multiple + $convert) + $unit;
		// @return $multiple;
	}

}




@debug new-vr(base);
// @debug new-vr(1);
@debug new-vr(2);

// @debug $base_font_size;

// @debug convert_rem_ratio($test_base_line_height);
// @debug step-vr(base);
// @debug step-vr(0);
// @debug step-vr(.5);
// @debug step-vr(1);
// @debug step-vr(2);
// @debug step-vr(-1);
// @debug step-vr(-2);


// @debug step-vr(base);
