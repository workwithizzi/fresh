/*! ========================================================= */
/*! Title:    Luscious Sass Starter                           */
/*! Version:  0.0.1                                           */
/*! Info:     Part Sass starter and part front-end tool kit.  */
/*! @link     https://github.com/yisraelgrimes/luscious       */
/*! Site:     https://                                        */
/*! Author:   Yisrael Grimes                                  */
/*! Email:    yisraelgrimes@gmail.com                         */
/*! ========================================================= */
/* line 6, dev/styles/03_base/_resets.sass */
html,
body,
h1,
h2,
h3,
h4,
h5,
h6,
ul,
li,
p,
blockquote {
	margin: 0;
	padding: 0;
}

/* line 27, dev/styles/03_base/_resets.sass */
input,
textarea,
button {
	border: 0;
	border-radius: 0;
	outline: none;
	-webkit-appearance: none;
	   -moz-appearance: none;
	        appearance: none;
}

/* line 35, dev/styles/03_base/_resets.sass */
input:hover, input:active, input:focus,
textarea:hover,
textarea:active,
textarea:focus,
button:hover,
button:active,
button:focus {
	outline: none;
}

/* line 42, dev/styles/03_base/_resets.sass */
embed,
iframe,
img,
object,
video {
	max-width: 100%;
}

/* line 6, dev/styles/03_base/_base.sass */
html {
	font-size: 62.5%;
	line-height: 1.5;
	-webkit-box-sizing: border-box;
	        box-sizing: border-box;
	height: 100%;
}

/* line 12, dev/styles/03_base/_base.sass */
*,
*:before,
*:after {
	-webkit-box-sizing: inherit;
	        box-sizing: inherit;
}

/* line 18, dev/styles/03_base/_base.sass */
body {
	height: 100%;
	font-size: 1.6rem;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uc2NzcyIsIm1haW4uY3NzIiwiMDNfYmFzZS9fcmVzZXRzLnNhc3MiLCIwM19iYXNlL19iYXNlLnNhc3MiLCIwMV91dGlscy9sdXNjaW91cy9zZXR0aW5ncy9fYmFzZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLGdFQUFnRTtBQUNoRSxnRUFBZ0U7QUFDaEUsZ0VBQWdFO0FBQ2hFLGdFQUFnRTtBQUNoRSxnRUFBZ0U7QUFDaEUsZ0VBQWdFO0FBQ2hFLGdFQUFnRTtBQUNoRSxnRUFBZ0U7QUFDaEUsZ0VBQWdFO0FDRmhFLDZDQUE2QztBQ0o3Qzs7Ozs7Ozs7Ozs7O0NBWUMsVUFBUztDQUNULFdBQVU7Q0FBSTs7QURRZiw4Q0FBOEM7QUNBOUM7OztDQUdDLFVBQVM7Q0FDVCxpQkFBZ0I7Q0FDaEIsY0FBYTtDQUNiLHlCQUFnQjtJQUFoQixzQkFBZ0I7U0FBaEIsaUJBQWdCO0NBS0k7O0FERHJCLDhDQUE4QztBQ1Y5Qzs7Ozs7OztDQVdFLGNBQWE7Q0FBSTs7QURVbkIsOENBQThDO0FDTjlDOzs7OztDQUtDLGdCQUFlO0NBQUk7O0FEVXBCLDJDQUEyQztBRW5EM0M7Q0FDQyxpQkNJcUI7Q0RIckIsaUJDYXFCO0NEWnJCLCtCQUFzQjtTQUF0Qix1QkFBc0I7Q0FDdEIsYUFBWTtDQUFJOztBRnVEakIsNENBQTRDO0FFckQ1Qzs7O0NBR0MsNEJBQW1CO1NBQW5CLG9CQUFtQjtDQUFJOztBRnlEeEIsNENBQTRDO0FFdEQ1QztDQUNDLGFBQVk7Q0FDWixrQkNTc0I7Q0RUTyIsImZpbGUiOiJtYWluLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIkBjaGFyc2V0ICd1dGYtOCc7XG4vLyBMdXMgdjAuMC4xXG5cbi8qISA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qISBUaXRsZTogICAgTHVzY2lvdXMgU2FzcyBTdGFydGVyICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qISBWZXJzaW9uOiAgMC4wLjEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qISBJbmZvOiAgICAgUGFydCBTYXNzIHN0YXJ0ZXIgYW5kIHBhcnQgZnJvbnQtZW5kIHRvb2wga2l0LiAgKi9cbi8qISBAbGluayAgICAgaHR0cHM6Ly9naXRodWIuY29tL3lpc3JhZWxncmltZXMvbHVzY2lvdXMgICAgICAgKi9cbi8qISBTaXRlOiAgICAgaHR0cHM6Ly8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qISBBdXRob3I6ICAgWWlzcmFlbCBHcmltZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qISBFbWFpbDogICAgeWlzcmFlbGdyaW1lc0BnbWFpbC5jb20gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qISA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4vLyBOb3JtYWxpemUgaXMgYmVpbmcgYWRkZWQgd2l0aCBndWxwIGFzIHNlcGFyYXRlIGNzcyBmaWxlIHRocm91Z2ggaHRtbFxuLy8gYW5kIHdpbGwgYmUgY29uY2F0ZWQgaW50byB0aGUgbWFpbi5jc3Mgd2l0aCBndWxwIGR1cmluZyB0aGUgZmluYWwgYnVpbGQuXG4vLyBJdCBpcyBhbHNvIGF2YWlsYWJsZSBpbiBMdXNjaW91cyBidXQgaXNuJ3QgaW1wb3J0ZWQgYnkgZGVmYXVsdC5cbi8vIEBpbXBvcnQgXCIwMV91dGlscy9sdXNjaW91cy9zbmlwcGV0cy9fbm9ybWFsaXplLnNjc3NcIjtcblxuXG4vLyBVdGlsaXRpZXMvVmVuZG9ycy9Ub29sc1xuQGltcG9ydCBcIjAxX3V0aWxzL2x1c2Npb3VzL2x1c2Npb3VzXCI7XG5cbi8vIFByb2plY3QgU2V0dGluZ3NcbkBpbXBvcnQgXCIwMl9zZXR0aW5ncy9pbmRleFwiO1xuXG4vLyBCYXNlIFN0eWxlc1xuQGltcG9ydCBcIjAzX2Jhc2UvcmVzZXRzXCI7XG5AaW1wb3J0IFwiMDNfYmFzZS9iYXNlXCI7XG5AaW1wb3J0IFwiMDNfYmFzZS90eXBvZ3JhcGh5XCI7XG5AaW1wb3J0IFwiMDNfYmFzZS9sX2hlYWRlclwiO1xuXG4vLyBPYmplY3RzXG5AaW1wb3J0IFwiMDRfb2JqZWN0cy9idXR0b25zXCI7XG5cbi8vIENvbXBvbmVudHNcbkBpbXBvcnQgXCIwNV9jb21wb25lbnRzL25hdlwiO1xuXG4vLyBQYWdlc1xuQGltcG9ydCBcIjA2X3BhZ2VzL2hvbWVcIjtcblxuLy8gVGhlbWVzXG5AaW1wb3J0IFwiMDdfdGhlbWVzL2RlZmF1bHRcIjtcblxuLy8gU2hhbWVcbkBpbXBvcnQgXCJzaGFtZVwiOyIsIi8qISA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qISBUaXRsZTogICAgTHVzY2lvdXMgU2FzcyBTdGFydGVyICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qISBWZXJzaW9uOiAgMC4wLjEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qISBJbmZvOiAgICAgUGFydCBTYXNzIHN0YXJ0ZXIgYW5kIHBhcnQgZnJvbnQtZW5kIHRvb2wga2l0LiAgKi9cbi8qISBAbGluayAgICAgaHR0cHM6Ly9naXRodWIuY29tL3lpc3JhZWxncmltZXMvbHVzY2lvdXMgICAgICAgKi9cbi8qISBTaXRlOiAgICAgaHR0cHM6Ly8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qISBBdXRob3I6ICAgWWlzcmFlbCBHcmltZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qISBFbWFpbDogICAgeWlzcmFlbGdyaW1lc0BnbWFpbC5jb20gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qISA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qIGxpbmUgNiwgZGV2L3N0eWxlcy8wM19iYXNlL19yZXNldHMuc2FzcyAqL1xuaHRtbCxcbmJvZHksXG5oMSxcbmgyLFxuaDMsXG5oNCxcbmg1LFxuaDYsXG51bCxcbmxpLFxucCxcbmJsb2NrcXVvdGUge1xuXHRtYXJnaW46IDA7XG5cdHBhZGRpbmc6IDA7XG59XG5cbi8qIGxpbmUgMjcsIGRldi9zdHlsZXMvMDNfYmFzZS9fcmVzZXRzLnNhc3MgKi9cbmlucHV0LFxudGV4dGFyZWEsXG5idXR0b24ge1xuXHRib3JkZXI6IDA7XG5cdGJvcmRlci1yYWRpdXM6IDA7XG5cdG91dGxpbmU6IG5vbmU7XG5cdGFwcGVhcmFuY2U6IG5vbmU7XG59XG5cbi8qIGxpbmUgMzUsIGRldi9zdHlsZXMvMDNfYmFzZS9fcmVzZXRzLnNhc3MgKi9cbmlucHV0OmhvdmVyLCBpbnB1dDphY3RpdmUsIGlucHV0OmZvY3VzLFxudGV4dGFyZWE6aG92ZXIsXG50ZXh0YXJlYTphY3RpdmUsXG50ZXh0YXJlYTpmb2N1cyxcbmJ1dHRvbjpob3ZlcixcbmJ1dHRvbjphY3RpdmUsXG5idXR0b246Zm9jdXMge1xuXHRvdXRsaW5lOiBub25lO1xufVxuXG4vKiBsaW5lIDQyLCBkZXYvc3R5bGVzLzAzX2Jhc2UvX3Jlc2V0cy5zYXNzICovXG5lbWJlZCxcbmlmcmFtZSxcbmltZyxcbm9iamVjdCxcbnZpZGVvIHtcblx0bWF4LXdpZHRoOiAxMDAlO1xufVxuXG4vKiBsaW5lIDYsIGRldi9zdHlsZXMvMDNfYmFzZS9fYmFzZS5zYXNzICovXG5odG1sIHtcblx0Zm9udC1zaXplOiA2Mi41JTtcblx0bGluZS1oZWlnaHQ6IDEuNTtcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0aGVpZ2h0OiAxMDAlO1xufVxuXG4vKiBsaW5lIDEyLCBkZXYvc3R5bGVzLzAzX2Jhc2UvX2Jhc2Uuc2FzcyAqL1xuKixcbio6YmVmb3JlLFxuKjphZnRlciB7XG5cdGJveC1zaXppbmc6IGluaGVyaXQ7XG59XG5cbi8qIGxpbmUgMTgsIGRldi9zdHlsZXMvMDNfYmFzZS9fYmFzZS5zYXNzICovXG5ib2R5IHtcblx0aGVpZ2h0OiAxMDAlO1xuXHRmb250LXNpemU6IDEuNnJlbTtcbn1cbiIsIi8vIE9waW5pb25hdGVkIFJlc2V0cyBvbiB0b3Agb2YgTm9ybWFsaXplXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuLy8gUmVzZXRzIG1hcmdpbnMgYW5kIHBhZGRpbmdzIGZvciBodG1sLCBib2R5LCBoZWFkZXJzLCB1bCwgb2wsIGFuZCBwXG5odG1sLFxuYm9keSxcbmgxLFxuaDIsXG5oMyxcbmg0LFxuaDUsXG5oNixcbnVsLFxubGksXG5wLFxuYmxvY2txdW90ZSB7XG5cdG1hcmdpbjogMDtcblx0cGFkZGluZzogMDsgfVxuXG5cbi8vIENvbXBsZXRlbHkgcmVzZXRzIGZvcm0gaXRlbXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN1cGVyIGhhcmQgcmVzZXQgdGhhdCByZW1vdmVzIGFsbCBib3JkZXJzXG4vLyBhbmQgcmFkaXVzIG9mIGFsbCBmb3JtIGl0ZW1zLlxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuaW5wdXQsXG50ZXh0YXJlYSxcbmJ1dHRvbiB7XG5cdGJvcmRlcjogMDtcblx0Ym9yZGVyLXJhZGl1czogMDtcblx0b3V0bGluZTogbm9uZTtcblx0YXBwZWFyYW5jZTogbm9uZTtcblxuXHQmOmhvdmVyLFxuXHQmOmFjdGl2ZSxcblx0Jjpmb2N1cyB7XG5cdFx0b3V0bGluZTogbm9uZTsgfSB9XG5cblxuLy8gU2V0IEltYWdlIGFuZCBPYmplY3RzIHRvIGhhdmUgYSBtYXgtd2lkdGggb2YgMTAwJVxuZW1iZWQsXG5pZnJhbWUsXG5pbWcsXG5vYmplY3QsXG52aWRlbyB7XG5cdG1heC13aWR0aDogMTAwJTsgfVxuIiwiLy8gQmFzZSBzdHlsZXMgZm9yIGh0bWwgYW5kIGJvZHlcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4vLyBVc2UgYm9yZGVyLWJveCBmb3IgZXZlcnl0aGluZ1xuaHRtbCB7XG5cdGZvbnQtc2l6ZTogJGh0bWxfZm9udF9zaXplO1xuXHRsaW5lLWhlaWdodDogJGJhc2VfbGluZV9oZWlnaHQ7XG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdGhlaWdodDogMTAwJTsgfVxuXG4qLFxuKjpiZWZvcmUsXG4qOmFmdGVyIHtcblx0Ym94LXNpemluZzogaW5oZXJpdDsgfVxuXG5cbmJvZHkge1xuXHRoZWlnaHQ6IDEwMCU7XG5cdGZvbnQtc2l6ZTogJGJhc2VfZm9udF9zaXplOyB9XG4iLCIvLyBMdXMgdjAuMC4xXG4vL1xuLy8gRGVmaW5lcyBiYXNlIHJ1bGVzIGZvciBMdXNjaW91cyBhbmQgeW91ciBwcm9qZWN0LlxuLy9cbi8vIHNhc3MtbGludDpkaXNhYmxlIGNsYXNzLW5hbWUtZm9ybWF0XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuLy8gSFRNTCBSb290IEZvbnQgU2l6ZSAoaW4gcGVyY2VudGFnZXMpXG4vLyBBcHBsaWVkIHRvIGh0bWwgZWxlbWVudC4gT3RoZXIgZWxlbWVudCBzaXppbmcgaXMgYmFzZWQgb24gdGhpc1xuJGh0bWxfZm9udF9zaXplOiA2Mi41JSAhZGVmYXVsdDsgLy8gcm9vdCA9PSAxMHB4XG4vLyA2Mi41JSBpcyB1c2VkIHRvIG1ha2UgcmVtIG1hdGggZWFzaWVyLiBSZW0gc2l6ZXMgYXJlIG5vdyBkaXZpc2libGUgYnkgMTAuXG4vLyBFeGFtcGxlOiBUbyBnZXQgYSAyMHB4IGVxdWl2YWxlbnQsIHlvdSBub3cgdXNlIDJyZW0gaW5zdGVhZCBvZiAxLjI1cmVtLlxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEJhc2VsaW5lIEhlaWdodFxuLy8gVXNlZCBmb3IgdmVydGljYWwgcmh5dGhtIGFuZCBiYXNlbGluZSBncmlkc1xuLy8gQXBwbGllZCB0byBodG1sIChyb290KSBvciB0byBib2R5IGVsZW1lbnRcbi8vIERvbid0IGZvcmdldCB0byBhZGQgeW91ciB1bml0IG9mIG1lYXN1cmVtZW50IGhlcmUgdG9vIGlmIHlvdSByZXF1aXJlIGl0LlxuJGJhc2VfbGluZV9oZWlnaHQ6IDEuNSAhZGVmYXVsdDtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBCYXNlIEZvbnQtU2l6ZVxuLy8gVGhpcyB3b3VsZCBzdGFydCBhdCB5b3VyIGJvZHkgZWxlbWVudC5cbi8vIEkgc3VnZ2VzdCB1c2luZyByZW0gdW5pdHMgc28gdGhhdCBpdCB3b3JrcyBvZmYgb2YgeW91ciBodG1sXG4vLyBmb250LXNpemUgYnV0IHlvdSBjYW4gdXNlIHdoYXRldmVyIHVuaXQgeW91IHdpc2guXG4kYmFzZV9mb250X3NpemU6IDEuNnJlbSAhZGVmYXVsdDtcbiJdfQ== */
