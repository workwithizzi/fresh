/*! ========================================================= */
/*! Title:    Luscious Sass Starter                           */
/*! Version:  0.0.1                                           */
/*! Info:     Part Sass starter and part front-end tool kit.  */
/*! @link     https://github.com/yisraelgrimes/luscious       */
/*! Site:     https://                                        */
/*! Author:   Yisrael Grimes                                  */
/*! Email:    yisraelgrimes@gmail.com                         */
/*! ========================================================= */
/* line 6, dev/styles/base/_resets.sass */
html,
body,
h1,
h2,
h3,
h4,
h5,
h6,
ul,
li,
p,
blockquote {
	margin: 0;
	padding: 0;
}

/* line 27, dev/styles/base/_resets.sass */
input,
textarea,
button {
	border: 0;
	border-radius: 0;
	outline: none;
	-webkit-appearance: none;
	   -moz-appearance: none;
	        appearance: none;
}

/* line 35, dev/styles/base/_resets.sass */
input:hover, input:active, input:focus,
textarea:hover,
textarea:active,
textarea:focus,
button:hover,
button:active,
button:focus {
	outline: none;
}

/* line 42, dev/styles/base/_resets.sass */
embed,
iframe,
img,
object,
video {
	max-width: 100%;
}

/* line 6, dev/styles/base/_base.sass */
html {
	font-size: 62.5%;
	line-height: 1.5;
	-webkit-box-sizing: border-box;
	        box-sizing: border-box;
	height: 100%;
}

/* line 12, dev/styles/base/_base.sass */
*,
*:before,
*:after {
	-webkit-box-sizing: inherit;
	        box-sizing: inherit;
}

/* line 18, dev/styles/base/_base.sass */
body {
	height: 100%;
	font-size: 1.6rem;
}

/** Styles for AG grids & Container */
/** =============================== */
/* line 17, dev/styles/_shame.sass */
.container {
	background-color: #fbeecb;
}

/* line 19, dev/styles/_shame.sass */
.ag1, .ag3 {
	background-color: #71dad2;
}

/* line 21, dev/styles/_shame.sass */
.ag2 {
	background-color: #fae7b3;
}

/* line 23, dev/styles/_shame.sass */
.ag4, .ag5, .ag8, .ag9 {
	background-color: #ee9e9c;
}

/* line 25, dev/styles/_shame.sass */
.ag6 {
	background-color: #f09671;
}

/* line 27, dev/styles/_shame.sass */
.ag7 {
	background-color: #f6d784;
}

/* line 29, dev/styles/_shame.sass */
.ag10 {
	background-color: #ea9fc3;
}

/** Text Styles */
/** =========== */
/* line 35, dev/styles/_shame.sass */
h2 {
	text-align: center;
	font-size: 1.6rem;
	font-weight: normal;
	padding-top: 2.8rem;
	padding-bottom: 2.8rem;
}

/** =============================== */
/** Susy Grid */
/** =============================== */
/* line 48, dev/styles/_shame.sass */
.container {
	max-width: 100%;
	margin-left: auto;
	margin-right: auto;
	*zoom: 1;
}

/* line 12, dev/styles/utils/luscious/bin/susy/output/support/_clearfix.scss */
.container:after {
	content: " ";
	display: block;
	clear: both;
}

/* line 38, dev/styles/utils/luscious/bin/_clearfix.scss */
.container:before, .container:after {
	content: '';
	display: table;
}

/* line 43, dev/styles/utils/luscious/bin/_clearfix.scss */
.container:after {
	clear: both;
}

/* line 53, dev/styles/_shame.sass */
.ag1 {
	width: 18.36735%;
	float: left;
	margin-right: 2.04082%;
}

/* line 56, dev/styles/_shame.sass */
.ag2 {
	width: 59.18367%;
	float: left;
	margin-right: 2.04082%;
	*zoom: 1;
}

/* line 38, dev/styles/utils/luscious/bin/_clearfix.scss */
.ag2:before, .ag2:after {
	content: '';
	display: table;
}

/* line 43, dev/styles/utils/luscious/bin/_clearfix.scss */
.ag2:after {
	clear: both;
}

/* line 60, dev/styles/_shame.sass */
.ag3 {
	width: 18.36735%;
	float: right;
	margin-right: 0;
}

/* line 63, dev/styles/_shame.sass */
.ag4 {
	width: 48.27586%;
	float: left;
	margin-right: 3.44828%;
}

/* line 66, dev/styles/_shame.sass */
.ag5 {
	width: 48.27586%;
	float: right;
	margin-right: 0;
}

/* line 69, dev/styles/_shame.sass */
.ag6 {
	width: 31.03448%;
	float: left;
	margin-right: 3.44828%;
}

/* line 72, dev/styles/_shame.sass */
.ag7 {
	width: 65.51724%;
	float: right;
	margin-right: 0;
	*zoom: 1;
}

/* line 38, dev/styles/utils/luscious/bin/_clearfix.scss */
.ag7:before, .ag7:after {
	content: '';
	display: table;
}

/* line 43, dev/styles/utils/luscious/bin/_clearfix.scss */
.ag7:after {
	clear: both;
}

/* line 76, dev/styles/_shame.sass */
.ag8 {
	width: 47.36842%;
	float: left;
	margin-right: 5.26316%;
}

/* line 79, dev/styles/_shame.sass */
.ag9 {
	width: 47.36842%;
	float: right;
	margin-right: 0;
}

/* line 82, dev/styles/_shame.sass */
.ag10 {
	clear: both;
	width: 100%;
	float: left;
	margin-left: 0;
	margin-right: 0;
}

/*# sourceMappingURL=data:application/json;base64, */
