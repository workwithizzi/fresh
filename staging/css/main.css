/*! ========================================================= */
/*! Title:    Luscious Sass Starter                           */
/*! Version:  0.0.1                                           */
/*! Info:     Part Sass starter and part front-end tool kit.  */
/*! @link     https://github.com/yisraelgrimes/luscious       */
/*! Site:     https://                                        */
/*! Author:   Yisrael Grimes                                  */
/*! Email:    yisraelgrimes@gmail.com                         */
/*! ========================================================= */
/* line 6, dev/styles/03_base/_resets.sass */
html,
body,
h1,
h2,
h3,
h4,
h5,
h6,
ul,
li,
p,
blockquote {
	margin: 0;
	padding: 0;
}

/* line 27, dev/styles/03_base/_resets.sass */
input,
textarea,
button {
	border: 0;
	border-radius: 0;
	outline: none;
	-webkit-appearance: none;
	   -moz-appearance: none;
	        appearance: none;
}

/* line 35, dev/styles/03_base/_resets.sass */
input:hover, input:active, input:focus,
textarea:hover,
textarea:active,
textarea:focus,
button:hover,
button:active,
button:focus {
	outline: none;
}

/* line 42, dev/styles/03_base/_resets.sass */
embed,
iframe,
img,
object,
video {
	max-width: 100%;
}

/* line 6, dev/styles/03_base/_base.sass */
html {
	font-size: 62.5%;
	line-height: 1.5;
	-webkit-box-sizing: border-box;
	        box-sizing: border-box;
	height: 100%;
}

/* line 12, dev/styles/03_base/_base.sass */
*,
*:before,
*:after {
	-webkit-box-sizing: inherit;
	        box-sizing: inherit;
}

/* line 18, dev/styles/03_base/_base.sass */
body {
	height: 100%;
	font-size: 1.6rem;
}

/*# sourceMappingURL=data:application/json;base64, */
