// -------------------------------------------------------------
// Neat Visual Grid
// -------------------------------------------------------------


$column: 4.2358em  !default;

/// Sets the relative width of a single grid gutter. The unit used should be the same one used to define `$column`. Set with the `!global` flag.
$gutter: 1.618em   !default;

/// Sets the total number of columns in the grid. Its value can be overridden inside a media query using the `media()` mixin. Set with the `!global` flag.
$grid-columns: 12  !default;

/// Sets the max-width property of the element that includes `outer-container()`. Set with the `!global` flag.
$max-width: 1200px !default;

// -------------------------------------------------------------

$visual-grid: true            !default;
$visual-grid-color: #eee      !default;
$visual-grid-index: back      !default;
$visual-grid-opacity: 0.4     !default;
$visual-grid-breakpoints: ()  !default;

// -------------------------------------------------------------

$parent-columns:   $grid-columns !default;
$fg-column:        $column;
$fg-gutter:        $gutter;
$fg-max-columns:   $grid-columns;
// $container-display-table: false !default;
// $layout-direction: LTR !default;


@function flex-grid($columns, $container-columns: $fg-max-columns) {
  $width: flex-width($columns);
  $container-width: flex-width($container-columns);
  @return percentage($width / $container-width);
}

@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {
  $container-width: flex-width($container-columns);
  @return percentage($gutter / $container-width);
}

@function flex-width($n, $column-width: $fg-column, $gutter-width: $fg-gutter) {
  @return $n * $column-width + ($n - 1) * $gutter-width;
}
// -------------------------------------------------------------

// Checks if a number is even
@function is-even($int) {
  @return $int % 2 == 0;
}

// -------------------------------------------------------------

// Generates a striped background
@function gradient-stops($grid-columns, $color: $visual-grid-color) {
  $transparent: transparent;
  $alt-color: darken($color, 10%);

  $column-width: flex-grid(1, $grid-columns);
  $gutter-width: flex-gutter($grid-columns);
  $column-offset: $column-width;
  $alternate: false;

  $values: ($transparent 0, if($alternate, $color, $alt-color) 0);

  @for $i from 1 to $grid-columns*2 {
    @if is-even($i) {
      $values: append($values, $transparent $column-offset, comma);
      $values: append($values, if($alternate, $color, $alt-color) $column-offset, comma);
      $column-offset: $column-offset + $column-width;
    } @else {
      $values: append($values, if($alternate, $color, $alt-color) $column-offset, comma);
      $values: append($values, $transparent $column-offset, comma);
      $column-offset: $column-offset + $gutter-width;

      $alternate: not $alternate;
    }
  }

  @return $values;
}

// -------------------------------------------------------------

@mixin grid-column-gradient($values...) {
  background-image: -webkit-linear-gradient(left, $values);
  background-image: -moz-linear-gradient(left, $values);
  background-image: -ms-linear-gradient(left, $values);
  background-image: -o-linear-gradient(left, $values);
  background-image: unquote("linear-gradient(to left, #{$values})");
}

@if $visual-grid == true or $visual-grid == yes {
  body:before {
    @include grid-column-gradient(gradient-stops($grid-columns));
    content: "";
    display: inline-block;
    height: 100%;
    left: 0;
    margin: 0 auto;
    max-width: $max-width;
    opacity: $visual-grid-opacity;
    pointer-events: none;
    position: fixed;
    right: 0;
    width: 100%;

    @if $visual-grid-index == back {
      z-index: -1;
    }

    @else if $visual-grid-index == front {
      z-index: 9999;
    }

    @each $breakpoint in $visual-grid-breakpoints {
      @if $breakpoint {
        @include media($breakpoint) {
          @include grid-column-gradient(gradient-stops($grid-columns));
        }
      }
    }
  }
}
