// Lus v0.0.1
//
// Sass map functions
//
// sass-lint:disable no-css-comments
// ===================================================================

// Add error handling to the `map-get` function
@mixin __info_map_get_check {
	@debug "[INFO]
	The `map_get_check` function just adds error handling to the built-in
	`map-get` function and is used in the exact same way.
	Type  : Function
	Params:
	- $map: A single, predefined map.
	- $key: A key that is contained in the map.
	";
}

@function map_get_check($map, $key) {
	@if map-has-key($map, $key) {
		@return map-get($map, $key);
	}
	@warn "The key `#{$key}` is not in the map `#{$map}`. 
	For more info, try the `__info(map_get_check)` mixin.";
	@return null;
}

// -------------------------------------

// Replace the `map-merge` function so that more than 2 maps can be merged.
@mixin __info_map_collect {
	@debug "[INFO]
	The `map_collect` function adds the ability to merge more than two maps.
	Use it like you would use `map-merge` but add as many maps as you want.
	Type  : Function
	Params:
	- $maps: 2 or more predefined maps separated by commas.
	";
}

// 2DO-LUS: Add better error handling for when a map doesn't exist
@function map_collect($maps...) {
	$collection: ();
	@each $map in $maps {
		$collection: map-merge($collection, $map);
	}
	@return $collection;
}

// -------------------------------------

// Get map nested 1 level deep
// 2DO-LUS: Add error handling (maybe with map_get_check)
@function map_get_nested($parent, $child, $key) {
	@return map-get(map-get($parent, $child), $key);
}

@mixin __info_map_get_nested {
	@debug "[INFO]
	The `map_get_nested` function works just like the `map-get` function
	but for nested maps (1 layer deep).
	Type  : Function
	Params:
	- $parent: The parent map
	- $child : The map nested in parent
	- $key   : The key defined in the $child map
	";
}

// Loop through nested maps
// @mixin map_loop_nest($map, $key) {
// 	$nested_map: map_get_check($map, $key);
// 	&:#{$key} {
// 		@each $key, $value in $nested_map {
// 			#{$key}: $value;
// 		}
// 	}
// }


// ===================================================================
// Tests
// ===================================================================

@mixin __test_map_get_check {
	@if $output_test_message { @debug "[TESTING] `map_get_check`"; }
	/* `map_get_check` ------------------ */
	/*
	$test_map: ( one: red, two: blue );
	.test.map_get_check {
		color: map_get_check($test_map, one);
	}
	*/
	$test_map: ( one: red, two: blue );
	.test.map_get_check {
		color: map_get_check($test_map, one);
	}
	/* End `map_get_check` -------------- */
}


@mixin __test_map_collect {
	@if $output_test_message { @debug "[TESTING] `map_collect`"; }
	/* `map_collect` -------------------- */
	/*
	$test_map1: ( 1one: red, 1two: blue );
	$test_map2: ( 2one: pink, 2two: purple );
	$test_map3: ( 3one: white, 3two: black );
	
	$collect_test: map_collect($test_map1, $test_map2, $test_map3);
	.test.map_collect {
		color: map_get_check($collect_test, 1one);
	}
	*/
	$test_map1: ( 1one: red, 1two: blue );
	$test_map2: ( 2one: pink, 2two: purple );
	$test_map3: ( 3one: white, 3two: black );
	
	$collect_test: map_collect($test_map1, $test_map2, $test_map3);
	.test.map_collect {
		color: map_get_check($collect_test, 1one);
	}
	/* End `map_collect` ---------------- */
}


@mixin __test_map_get_nested {
	@if $output_test_message { @debug "[TESTING] `map_get_nested`"; }
	/* `map_get_nested` ----------------- */
	/*
	$nested_map: (
		child1: (
			one: yellow,
		),
		child2: (
			two: green,
		)
	);
	.test.map_get_nested {
		color: map_get_nested($nested_map, child1, one);
		background-color: map_get_nested($nested_map, child2, two);
	}
	*/
	$nested_map: (
		child1: (
			one: yellow,
		),
		child2: (
			two: green,
		)
	);
	.test.map_get_nested {
		color: map_get_nested($nested_map, child1, one);
		background-color: map_get_nested($nested_map, child2, two);
	}
	/* End `map_get_nested` ------------- */
}