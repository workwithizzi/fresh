// Lus v0.0.2
//
// Make Sass color functions dynamic
//
// sass-lint:disable no-css-comments
// ===================================================================


// Helper for other color functions/mixins
// Used internally in Luscious
@function color_mix($mix, $color, $amount) {
	$mix_with: ();
	@if type-of($color) != color {
		@debug "`#{$color}` is not a color.
		For more info try the `__info(#{$mix})` mixin.";
		@return null;
	} @else if type-of($amount) != number or unit($amount) != "%" {
		@debug "`#{$amount}` is not a number percent.
		For more info try the `__info(#{$mix})` mixin.";
		@return null;
	} @else {

		@if $mix == "tint" { $mix_with: #fff; }
		@if $mix == "shade" { $mix_with: #000; }
		@if $mix == "tone" { $mix_with: #808080; }

		@return mix($mix_with, $color, $amount);
	}
}

// -------------------------------------

// Used to make the __info mixins dryer for the color mods
@mixin __color_mod_debugger($mod, $color) {
	@debug "[INFO]
	The `#{$mod}` function mixes your $color with
	`#{$color}` based on the $amount you pass.
	Type  : Function
	Params:
	- $color : Any color value.
	- $amount: Any percentage amount.
	";
}

// -------------------------------------

// # Tint Function
// Mixes a color with white.
// ref: http://bourbon.io/docs/#tint-shade
@function tint($color, $amount) {
	@return color_mix(tint, $color, $amount);
}

// Info mixin
@mixin __info_tint {
	@include __color_mod_debugger(tint, white);
}

// -------------------------------------

// # Shade
// Mixes a color with black.
// ref: http://bourbon.io/docs/#tint-shade
@function shade($color, $amount) {
	@return color_mix(shade, $color, $amount);
}

// Info mixin
@mixin __info_shade {
	@include __color_mod_debugger(shade, black);
}

// -------------------------------------

// # Tone
// Blends a color with another color (mid-grey by default).
@function tone($color, $amount) {
	@return color_mix(tone, $color, $amount);
}

// Info mixin
@mixin __info_tone {
	@include __color_mod_debugger(tone, mid-grey);
}





// -------------------------------------

// Make color functions more dynamic so they can be called with a sass
// map or variable.
@function color_function($function, $color, $amount) {
	@if $function == 'tint' {
		@return tint($color, $amount);
	}
	@if $function == 'shade' {
		@return shade($color, $amount);
	}
	@if $function == 'tone' {
		@return tone($color, $amount);
	}
	@if $function == 'lighten' {
		@return lighten($color, $amount);
	}
	@else if $function == 'darken' {
		@return darken($color, $amount);
	}
	@else if $function == 'saturate' {
		@return saturate($color, $amount);
	}
	@else if $function == 'desaturate' {
		@return desaturate($color, $amount);
	}
	@else if $function == 'adjust-hue' or $function == 'adjust_hue' {
		@return adjust-hue($color, $amount);
	}
	@else if $function == 'transparentize' {
		@if unit($amount) == "%" {
			$amount: $amount / 100%;
		}
		@return transparentize($color, $amount);
	}
	@else if $function == 'rgba' {
		@if unit($amount) == "%" {
			$amount: $amount / 100%;
		}
		@return rgba($color, $amount);
	}
	@else {
		@debug "#{$function} is not an available color function.
		For more info try the `__info(color_function)` mixin.";
		@return null;
	}
}

// Info
@mixin __info_color_function {
	@debug "[INFO]
	The `color_function` function is a work-around so that
	you can turn on/off color functions from a previously
	imported file by using a variable.
	Type  : Function
	Params:
	- $function : Required. Accepts: lighten, darken, saturate,
	-             desaturate, adjust-hue, transparentize, rgba,
	-             tint, shade, and tone
	- $color    : Required. Accepts any color value.
	- $percent  : Required. Accepts any percent value.
	";
}



// ===================================================================
// Tests
// ===================================================================


@mixin __test_tint {
	@if $output_test_message { @debug "[TESTING] `tint`"; }
	/* `tint` --------------------------- */
	/*
	.test.tint {
		color: tint(red, 30%);
	}
	*/
	.test.tint {
		color: tint(red, 30%);
	}
	/* End `tint` ----------------------- */
}


@mixin __test_shade {
	@if $output_test_message { @debug "[TESTING] `shade`"; }
	/* `shade` -------------------------- */
	/*
	.test.shade {
		color: shade(red, 30%);
	}
	*/
	.test.shade {
		color: shade(red, 30%);
	}
	/* End `shade` ---------------------- */
}


@mixin __test_tone {
	@if $output_test_message { @debug "[TESTING] `tone`"; }
	/* `tone` --------------------------- */
	/*
	.test.tone {
		color: tone(red, 30%);
	}
	*/
	.test.tone {
		color: tone(red, 30%);
	}
	/* End `tone` ----------------------- */
}


@mixin __test_color_function {
	@if $output_test_message { @debug "[TESTING] `color_function`"; }
	/* `color_function` ----------------- */
	/*
	.test.color_function {
		color: color_function(tint, red, 30%);
	}
	*/
	.test.color_function {
		color: color_function(tint, red, 30%);
	}
	/* End `color_function` ------------- */
}
