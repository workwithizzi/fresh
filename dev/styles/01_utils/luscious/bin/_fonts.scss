// Lus v0.0.1
//
// Helper Mixins for font maps, function for font weights maps, utility classes
//
// sass-lint:disable class-name-format
// ===================================================================


// Info for Font-stacks
@mixin __info_font_stacks {
	@debug "[INFO]
	By default, luscious has sans-serif, serif, and mono font stacks available.
	These can be called using the varibles:
	$font_stack_sans, $font_stack_serif, and $font_stack_mono.
	The fonts in the stacks include:
	Sans-Serif:
	#{$font_stack_sans}
	Serif:
	#{$font_stack_serif}
	Mono:
	#{$font_stack_mono}";
}

// -------------------------------------

// Info for font_weight function
@mixin __info_font_weight {
	@debug "[INFO]
	The `font_weight` function is used to make it easier to get the
	font-weight keys form the map `$font_weights`.
	Params:
	- $key: A key from the map
	Alias : `fw`
	Type  : Function
	";
}


// Function to get font weights from map
// 2DO-LUS: Fix error handling for unavailable keys
@function font_weight($key) {
	@return map_get_check($font_weights, $key);
}
// Alias
@function fw($key) {
	@return font_weight($key);
}


// -------------------------------------------------------------------
// Utility Classes
// -------------------------------------------------------------------
// Global Utility Prefix
$utility_class_prefix: 'u_' !default;

@mixin __info_font_stacks_utility_classes {
	@debug "[INFO]
	The `font_stacks_utility_classes` mixin makes it so that
	you can output font-stack utility classes for the default
	fonts-stacks from anywhere in the project.
	You can also turn on utility classes from `settings/utility_classes`.
	Type   : Standalone Mixin
	Params : none
	Output :
	- .#{$utility_class_prefix}font_sans
	- .#{$utility_class_prefix}font_serif
	- .#{$utility_class_prefix}font_mono
	";
}

@mixin font_stacks_utility_classes($info: null) {
	@if $info {
		@include __info_font_stacks_utility_classes;
	}
	@else {
		.#{$utility_class_prefix}font_sans {
			font-family: $font_stack_sans;
		}
		.#{$utility_class_prefix}font_serif {
			font-family: $font_stack_serif;
		}
		.#{$utility_class_prefix}font_mono {
			font-family: $font_stack_mono;
		}
	}
}

// Output Utility Classes from Luscious Config
@if index($utility_classes, font_stacks) {
	@include font_stacks_utility_classes;
}

// -------------------------------------

// Font Weights

@mixin __info_font_weights_utility_classes {
	@debug "[INFO]
	The `font_weights_utility_classes` mixin makes it so that
	you can output font-weight utility classes from
	anywhere in the project. Weights are determined by the
	map `$font_weights` in `settings/fonts`.
	You can also turn on utility classes from `settings/utility_classes`.
	Type   : Standalone Mixin
	Params : none
	";
}

@mixin font_weights_utility_classes($info: null) {
	@if $info {
		@include __info_font_weights_utility_classes;
	}
	@else {
		@if variable-exists(font_weights) {
			@each $key, $value in $font_weights {
				.#{$utility_class_prefix}font_#{$key} { font-weight: fw($key); }
			}
		} @else {
			@warn "The map `$font_weights` isn’t defined or isn't found.";
		}
	}
}

// Output Utility Classes from Luscious Config
@if index($utility_classes, font_weights) {
	@include font_weights_utility_classes;
}



// ===================================================================
// Tests
// ===================================================================

@mixin __test_font_stacks {
	@if $output_test_message { @debug "[TESTING] `font_stacks`"; }
	/* `font_stacks` -------------------- */
	/*
	.test.font_stack_sans  {
		font-family: $font_stack_sans;
	}
	*/
	.test.font_stack_sans  { font-family: $font_stack_sans;  }
	.test.font_stack_serif { font-family: $font_stack_serif; }
	.test.font_stack_mono  { font-family: $font_stack_mono;  }
	/* end `font_stacks` ---------------- */
}


@mixin __test_font_weight {
	@if $output_test_message { @debug "[TESTING] `font_weight`"; }
	/* `font_weight` -------------------- */
	/*
	.test_font_weight {
		font-weight: font_weight(normal);
	}
	 */
	@if variable-exists(font_weights) {
		.test_font_weights {
			@each $key, $value in $font_weights {
				.fw_#{$key} { font-weight: fw($key); }
			}
		}
	} @else {
		@warn "The map `$font_weights` isn’t defined or isn't found.";
	}
	/* end `font_weight` ---------------- */
}


@mixin __test_font_stacks_utility_classes {
	@if $output_test_message { @debug "[TESTING] `font_stacks_utility_classes`"; }
	/* `font_stacks_utility_classes` ---------- */
	/*
	@include font_stacks_utility_classes;
	*/
	@include font_stacks_utility_classes;
	/* End `font_stacks_utility_classes` ------ */
}


@mixin __test_font_weights_utility_classes {
	@if $output_test_message { @debug "[TESTING] `font_weights_utility_classes`"; }
	/* `font_weights_utility_classes` ---------- */
	/*
	@include font_weights_utility_classes;
	*/
	@include font_weights_utility_classes;
	/* End `font_weights_utility_classes` ------ */
}
