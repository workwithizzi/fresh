// Lus v0.0.1
//
// BreakPoint mixins and Info mixins
//
// sass-lint:disable class-name-format
// ===================================================================


// Info for `bp` mixin
@mixin __info_bp {
	@debug "[INFO]
	The `bp` mixin creates basic media-queryies.
	Type    : Mixin (Stadalone or Included)
	Params  :
	- $size : Required. Uses value from key in `$breakpoints` (default) map.
	-         Will accept any unit or variable. (See $map param.)
	- $query: Optional. Can be any sized-based feature. Defaults to `min-width`.
	- $type : Optional. Can be any query type. Defaults to `screen`.
	- $map  : Defaults to `$breakpoints` map. Can specify another map or `null`
	-         to use an individual number or variable.
	Alias:    mq
	Requires: Content Block
	";
}
// Alias
@mixin __info_mq {
	@include __info_bp;
}


// Basic Media Query Mixin
@mixin bp($size, $query: 'min-width', $type: 'screen', $map: $bp) {
	@if $size == "info" { @include __info_bp; }
	@else if $map {
		@media only #{$type} and (#{$query}: map_get_check($map, $size)) {
			@content;
		}
	}
	@else {
		@media only #{$type} and (#{$query}: $size) {
			@content;
		}
	}
}
// Alias for `bp`
@mixin mq($size, $query: 'min-width', $type: 'screen', $map: $bp) {
	@include bp($size, $query, $type, $map) {
		@content;
	}
}


// -------------------------------------

// Info for `between_sizes` mixin
@mixin __info_between_sizes {
	@debug "[INFO]
	The `between_sizes` mixin creates a basic `min - max` width media-query.
	Type  :   Mixin (Stadalone or Included)
	Params:
	- $min:  Required. Uses value from key in `$breakpoints` (default) map.
	- $max:  Required. Uses value from key in `$breakpoints` (default) map.
	-        $min/$max will accept any unit or variable. (See $map param.)
	- $type: Optional. Can be any query type. Defaults to `screen`.
	- $map:  Defaults to `$breakpoints` map. Can also specify another map.
	-        Use `null` to use an individual number or custom variable.
	";
}

// Generic Min/Max Width Media Query Mixin
@mixin between_sizes($min, $max, $type: 'screen', $map: $bp) {
	@if $min == "info" {
		@include __info_between_sizes;
	}
	@else if $map {
		@media only #{$type} and (min-width: map_get_check($map, $min)) and (max-width: map_get_check($map, $max)) {
			@content;
		}
	}
	@else {
		@media only #{$type} and (min-width: $min) and (max-width: $max) {
			@content;
		}
	}
}

// -------------------------------------

// Helper for declarative queries used internally in Luscious
@mixin declarative_query($mixin, $size, $query, $type: 'screen', $alias: 'none') {
	@if $type == "info" {
		$default_size: map_get_check($breakpoints, $size);
		$default_type: 'screen';
		@debug "[INFO]
		The `#{$mixin}` mixin is a declarative
		`#{$query}: #{$default_size}` media query.
		Type  :   Mixin (Stadalone or Included)
		Params:
		- $type:  Optional. Defaults to `#{$default_type}`.
		-         Will accept any media type.
		Alias :   `#{$alias}`
		";
	}
	@else {
		@include bp($size, $query, $type) { @content; }
	}
}

// -------------------------------------------------------------------

// Declarative Media Queries

// Max-Width Phone
@mixin for_phone_only($type: 'screen') {
	@include declarative_query(for_phone_only, phone, max-width, $type) {
		@content;
	}
}

// Info Mixin
@mixin __info_for_phone_only {
	@include for_phone_only(info);
}

// -------------------------------------

@mixin for_tablet_portrait_up($type: 'screen', $alias: for_tablet_up) {
	@include declarative_query(for_tablet_portrait_up, tablet_portrait, min-width, $type, $alias) {
		@content;
	}
}

// Info Mixin
@mixin __info_for_tablet_portrait_up {
	@include for_tablet_portrait_up(info);
}

// Alias Mixin
@mixin for_tablet_up($type: 'screen', $alias: for_tablet_portrait_up) {
	@include declarative_query(for_tablet_up, tablet_portrait, min-width, $type, $alias) {
		@content;
	}
}

// Alias Info
@mixin __info_for_tablet_up {
	@include for_tablet_up(info);
}

// -------------------------------------

@mixin for_tablet_landscape_up($type: 'screen') {
	@include declarative_query(for_tablet_landscape_up, tablet_landscape, min-width, $type) {
		@content;
	}
}

@mixin __info_for_tablet_landscape_up {
	@include for_tablet_landscape_up(info);
}

// -------------------------------------

@mixin for_desktop_up($type: 'screen') {
	@include declarative_query(for_desktop_up, desktop, min-width, $type) {
		@content;
	}
}
// Info Mixin 
@mixin __info_for_desktop_up {
	@include for_desktop_up(info);
}

// -------------------------------------

@mixin for_big_desktop_up($type: 'screen') {
	@include declarative_query(for_big_desktop_up, big_desktop, min-width, $type) {
		@content;
	}
}
// Info Mixin 
@mixin __info_for_big_desktop_up {
	@include for_big_desktop_up(info);
}

// -------------------------------------------------------------------

// Info Mixin for `print`
@mixin __info_print {
	@debug "[INFO]
	The `print` mixin sets up a basic `@media print` query.
	Params  : none
	Alias   : `for_print_only`
	Requires: Content Block
	";
}

// Alias Info
@mixin __info_for_print_only {
	@include __info_print;
}


// // Print Query
@mixin print($info: null) {
	@if $info {
		@include __info_print;
	}
	@else {
		@media print {
			@content;
		}
	}
}

// Alias Mixin
@mixin for_print_only($info: null) {
	@include print($info) {
		@content;
	}
}



// ===================================================================
// Tests
// ===================================================================

@mixin __test_bp {
	@if $output_test_message { @debug "[TESTING] `bp`"; }
	/* `bp` or `mq` --------------------- */
	/*
	.test.bp_basic {
		color: red;
		@include bp(desktop) {
			color: green;
		}
	}
	*/
	.test.bp_basic {
		color: red;
		@include bp(desktop) {
			color: green;
		}
	}
	/*
	.test.bp_options {
		@include mq(phone, max-width, screen, $bp) {
			color: pink;
		}
	}
	*/
	.test.bp_options {
		@include mq(phone, max-width, screen, $bp) {
			color: pink;
		}
	}
	/* End `bp` or mq ------------------- */
}


@mixin __test_between_sizes {
	@if $output_test_message { @debug "[TESTING] `between_sizes`"; }
	/* `between_sizes` ------------------ */
	/*
	.test.between_sizes {
		color: red;
		@include between_sizes(phone, desktop) {
			color: blue;
		}
	}
	*/
	.test.between_sizes {
		color: red;
		@include between_sizes(phone, desktop) {
			color: blue;
		}
	}
	/* End `between_sizes` -------------- */
}


@mixin __test_for_phone_only {
	@if $output_test_message { @debug "[TESTING] `for_phone_only`"; }
	/* `for_phone_only` ----------------- */
	/*
	.test.for_phone_only {
		display: block;
		@include for_phone_only {
			display: none;
		}
	}
	*/
	.test.for_phone_only {
		display: block;
		@include for_phone_only {
			display: none;
		}
	}
	/* End `for_phone_only` ------------- */
}


@mixin __test_for_tablet_portrait_up {
	@if $output_test_message { @debug "[TESTING] `for_tablet_portrait_up`"; }
	/* `for_tablet_portrait_up` --------- */
	/*
	.test.for_tablet_portrait_up {
		display: none;
		@include for_tablet_portrait_up {
			display: block;
		}
	}
	*/
	.test.for_tablet_portrait_up {
		display: none;
		@include for_tablet_portrait_up {
			display: block;
		}
	}
	/* End `for_tablet_portrait_up` ----- */
}


@mixin __test_for_tablet_up {
	@if $output_test_message { @debug "[TESTING] `for_tablet_up`"; }
	/* `for_tablet_up` ------------------ */
	/*
	.test.for_tablet_up {
		display: none;
		@include for_tablet_up {
			display: block;
		}
	}
	*/
	.test.for_tablet_up {
		display: none;
		@include for_tablet_up {
			display: block;
		}
	}
	/* End `for_tablet_up` -------------- */
}


@mixin __test_for_tablet_landscape_up {
	@if $output_test_message { @debug "[TESTING] `for_tablet_landscape_up`"; }
	/* `for_tablet_landscape_up` -------- */
	/*
	.test.for_tablet_landscape_up {
		display: none;
		@include for_tablet_landscape_up {
			display: block;
		}
	}
	*/
	.test.for_tablet_landscape_up {
		display: none;
		@include for_tablet_landscape_up {
			display: block;
		}
	}
	/* End `for_tablet_landscape_up` ---- */
}


@mixin __test_for_desktop_up {
	@if $output_test_message { @debug "[TESTING] `for_desktop_up`"; }
	/* `for_desktop_up` ----------------- */
	/*
	.test.for_desktop_up {
		display: none;
		@include for_desktop_up {
			display: block;
		}
	}
	*/
	.test.for_desktop_up {
		display: none;
		@include for_desktop_up {
			display: block;
		}
	}
	/* End `for_desktop_up` ------------- */
}


@mixin __test_for_big_desktop_up {
	@if $output_test_message { @debug "[TESTING] `for_big_desktop_up`"; }
	/* `for_big_desktop_up` ------------- */
	/*
	.test.for_big_desktop_up {
		display: none;
		@include for_big_desktop_up {
			display: block;
		}
	}
	*/
	.test.for_big_desktop_up {
		display: none;
		@include for_big_desktop_up {
			display: block;
		}
	}
	/* End `for_big_desktop_up` --------- */
}


@mixin __test_print {
	@if $output_test_message { @debug "[TESTING] `print`"; }
	/* `print` -------------------------- */
	/*
	.test.print {
		color: red;
		@include print {
			color: black;
		}
	}
	*/
	.test.print {
		color: red;
		@include print {
			color: black;
		}
	}
	/* End `print` ---------------------- */
}


@mixin __test_for_print_only {
	@if $output_test_message { @debug "[TESTING] `for_print_only`"; }
	/* `for_print_only` ----------------- */
	/*
	.test.for_print_only {
		color: red;
		@include for_print_only {
			color: black;
		}
	}
	*/
	.test.for_print_only {
		color: red;
		@include for_print_only {
			color: black;
		}
	}
	/* End `for_print_only` ------------- */
}