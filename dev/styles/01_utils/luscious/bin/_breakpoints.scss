// Lus v0.0.2
//
// BreakPoint mixins
//
// sass-lint:disable class-name-format
// ===================================================================

$breakpoints: (
	xs : 37.437em, // 599px
	sm : 37.5em ,  // 600px
	md : 61.875em, // 990px
	lg : 75em,     // 1200px
	xl : 112.5em,  // 1800px
) !default;


// ===================================================================
// ===================================================================
// ===================================================================


// Info for `breakpoint` mixin
@mixin __info_breakpoint {
	@debug "[INFO]
	The `breakpoint` mixin creates basic `screen-only` media-queries.
	Type    : Mixin (Stadalone or Included)
	Params  :
	- $size : Required. Accepts key from `$breakpoints` (default) map
	-         or any specific number (with unit). To see available keys
	-         in default map, try `@debug $breakpoints`
	- $query: Optional. Defaults to `min-width`. Accepts any query.
	- $map  : Optional. Defaults to `$breakpoints` map.
	Requires: Content Block
	Related : Mixins- `between_breakpoints`, `for_print`
	Alias   : `bp`
	";
}


// Media Query Mixin
@mixin breakpoint($size, $query: 'min-width', $map: $breakpoints) {

	@if $query == "min" { $query: "min-width"; }
	@if $query == "max" { $query: "max-width"; }
	@if $query == "print" {
		@warn "Use the `for_print` mixin for `print` media queries.";
	}
	// Provide info to terminal
	@if $size == "info" { @include __info_breakpoint; }
	@else {

		// Use the sass map if the key matches the map
		@if map-has-key($map, $size) {
			@media only screen and (#{$query}: map-get($map, $size)) {
				@content;
			}
		}
		// If the key doesn't match the map and is a number, use it.
		@else if type-of($size) == number {
			@media only screen and (#{$query}: $size) {
				@content;
			}
		}
		// If the map/key or number works, send a message to terminal
		@else {
			@warn "`#{$size}` is not a number. You're gonna need a number here, bud.";
		}
	}
}

// Alias mixin
@mixin bp($size, $query: 'min-width', $map: $breakpoints) {
	@include breakpoints($size, $query, $map) {
		@content;
	}
}

// -------------------------------------

// Info for `between_breakpoints` mixin
@mixin __info_between_breakpoints {
	@debug "[INFO]
	The `between_breakpoints` mixin creates a basic `min - max` width media-query.
	Type  :   Mixin (Stadalone or Included)
	Params:
	- $min  : Required.
	- $max  : Required.
	-         $min/$max accepts key from `$breakpoints` (default) map
	-         or any specific number (with unit). To see available keys
	-         in default map, try `@debug $breakpoints`
	- $map:   Optional. Defaults to `$breakpoints` map.
	Requires: Content Block
	Related : Mixins- `breakpoint`, `for_print`
	Alias   : `between_bp`
	";
}


// Mix-Max Media Query
@mixin between_breakpoints($min, $max: null, $map: $breakpoints) {

	// Provide info to terminal
	@if $min == "info" { @include __info_between_breakpoints; }
	@else {

		// Validate $min param
		@if map-has-key($map, $min) {
			$min: map-get($map, $min);
		} @else if type-of($min) == number {
			$min: $min;
		} @else {
			@warn "`#{$min}` needs to be a number.";
		}

		// Validate $max param
		@if map-has-key($map, $max) {
			$max: map-get($map, $max);
		} @else if type-of($max) == number {
			$max: $max;
		} @else {
			@warn "`#{$max}` needs to be a number.";
		}

		@media only screen and (min-width: $min) and (max-width: $max) {
			@content;
		}

	}
}


// Alias mixin
@mixin between_bp($size, $query: 'min-width', $map: $breakpoints) {
	@include between_breakpoints($min, $max, $map) {
		@content;
	}
}

// -------------------------------------


// TODO::: Make `print` query
