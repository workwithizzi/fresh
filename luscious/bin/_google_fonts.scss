// Luscious
// @since v0.0.1
//
// Description
//
// sass-lint:disable class-name-format
// Reference: https://codepen.io/jakob-e/pen/LVVXjO
// ===================================================================


//  Subset config 
//    
//  Note! 
//  The Latin subset is always included if available and need not be specified. 
//  Please note that if a client browser supports unicode-range the subset parameter 
//  is ignored; the browser will select from the subsets supported by the font to 
//  get what it needs to render the text.
//  Source: https://developers.google.com/fonts/docs/getting_started
//
$google-font-subsets: (
	'arabic'      : false 
	, 'bengali'     : false 
	, 'cyrillic'    : false 
	, 'cyrillic-ext': false 
	, 'devanagari'  : false 
	, 'greek'       : false 
	, 'greek-ext'   : false 
	, 'gujarati'    : false
	, 'hebrew'      : false 
	, 'khmer'       : false 
	, 'latin'       : false
	, 'latin-ext'   : false 
	, 'tamil'       : false 
	, 'telugu'      : false 
	, 'thai'        : false
	, 'vietnamese'  : false 
) !default;

//  
//   Google Fonts
//

@mixin __info_google_fonts {
	@debug "[INFO]
	The `google_fonts` mixin can be used to simplify embedding Google fonts.
	Type      : Standalone Mixin
	Parameters:
	- $name   : Required. Accepts any Google font name. Ex: `Open Sans`
	- $weights: Optional. Defaults to `400`.
	- $styles : Optional. Defaults to `normal`. Accepts word (`italic`)
	-           or numeric value (`400i`). If a word is used, it will
	-           apply to all $weights.
	- $limit  : Optional. Defualts to `null`. Allows you to limit the request
	-           to specific characters for optimization.
	Extra     : This mixin allows nesting within itself (parent accepts no params)
	-           so that the all fonts will be imported in the same request.
	See       : https://goo.gl/LSNXCF
	
	Example SCSS: (Single font import)
	@include google_fonts(\"Open Sans\", 400 700, normal);
	
	Example SCSS: (Multiple imports)
	@include google_fonts {
		@include google_fonts(Material Icons);
		@include google_fonts(Lato, 400 700, normal);
	};
	";
}


@mixin google_fonts(
	$name   : null,  //  string (unquoted will work too)
	$weights: 400,      //  list or numeric value (100 200 300 400 ...)
	$styles : normal,       //  list or string (normal and or italic)
	$limit  : null          //  string (don\'t forget to unescape )
	){
		
		@if $name == 'info' { @include __info_google_fonts; }
		
		//  base url
		$URL: 'https://fonts.googleapis.com/css?family=';

		//  create global variables 
		@if not variable-exists(__gf__combine){ $__gf__combine: false !global; }
		@if not variable-exists(__gf__map){ $__gf__map: () !global; }   
		@if not variable-exists(google-font-subsets){ $google-font-subsets: () !global; }   

		//  append italic to weights
		@if index($styles, italic) and not str-index($weights+'',i){
			$wgt: if(index($styles, normal), $weights, ()); 
			@each $weight in $weights { $wgt: append($wgt, $weight + i); }
			$weights: $wgt;
		} 

		//  reduce and encode text
		@if $limit {
			$list: __gf__list-unique(__gf__str-explode($limit));
			$limit:'&text=';
			$encode:('!':'%21','#':'%23','$':'%24','&':'%26','\'':'%27',
							 '(':'%28',')':'%29','*':'%2A','+':'%2B',',':'%2C',
							 '/':'%2F',':':'%3A',';':'%3B','=':'%3D','?':'%3F',
							 '@':'%40','[':'%5B',']':'%5D',' ':'%20');           
			@for $i from 1 through length($list) {
				$char: map-get($encode,nth($list,$i)) or nth($list,$i);
				$limit: $limit + $char;
			}
		}

		//  subsets from config
		$subset: '';    
		@each $set, $enabled in $google-font-subsets {
			@if $enabled {
				$subset: $subset + if($subset == '', '', ',') + $set;            
			}
		} 
		$subset: if(str-length($subset) > 0 and $subset != latin, '&subset=' + $subset, '');

		@if $name {
			//  replace name whitespaces  
			$name: if(type-of($name) == string, unquote($name),$name);
			$name: __gf__str-replace(inspect($name),' ','+');
			@if $__gf__combine and not $limit {
				//  add weights to combine map 
				$wgt: map-get($__gf__map, $name) or ();
				$wgt: __gf__list-unique(join($wgt, $weights, comma));
				$__gf__map: map-merge($__gf__map, ($name: $wgt)) !global;
			} @else {
				//  create query
				$query: '';
				@each $weight in $weights { $query: $query + if($query != '', ',', '') + $weight; }
				$query: __gf__str-replace($query, ' ');
				$query: $name + if(str-length($query) > 0 and $query != '400',  ':'+ $query, '');

				//  create single immport
				@at-root { @import url($URL + $query + if($limit, $limit, '') + $subset); }
			}
		} @else {
			//  set combine flag
			$__gf__combine: true  !global;

			//  nested includes   
			@content;

			//  convert combine map to query
			//  (remove weights if just 400)
			$query:'';        
			@each $font, $weights in $__gf__map {
				$query: $query + if($query != '', '|', '') + $font + 
								if(length($weights) == 1 and (nth($weights, 1) == '400'), 
								'', ':' + join((), $weights, comma));
			}       

			//  remove query whitespaces 
			$query: __gf__str-replace($query,' ');

			//  create combined immport
			@at-root { @import url($URL + $query + $subset); }

			//  reset combine flag
			$__gf__combine: false !global;
		}
} // end: mixin


// 
//  Helper functions
//
@function __gf__list-unique($list) {
	$result: ();
	@each $item in $list { @if not index($result, $item+''){ $result: append($result, $item+'');} }
	@each $item in $result { $result: set-nth($result, index($result, $item),unquote($item)); }
	@return $result;
}
@function __gf__str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search); 
	@return if($index, 
		str-slice($string, 1, $index - 1) + $replace + 
		__gf__str-replace(str-slice($string, $index + 
		str-length($search)), $search, $replace), 
		$string);
}
@function __gf__str-explode($string){
	$list:(); 
	@for $i from 1 through str-length($string) { $list: append($list, str-slice($string, $i, $i)); } 
	@return $list;
}


// ===================================================================
// Tests
// ===================================================================

@mixin __test_google_fonts {
	@if $output_test_message { @debug "[TESTING] `google_fonts`"; }
	/* `google_fonts` ------------------- */
	/*
	@include google_fonts {
		@include google_fonts(Material Icons);
		@include google_fonts(Lato);
	};
	@include google_fonts(Roboto, 400 700);
	@include google_fonts(Open Sans, 400 700, italic normal);
	@include google_fonts(Raleway, 400 400i 500 700 700i );
	@include google_fonts(Lora, 400 700, $limit: 'F');
	*/
	@include google_fonts {
		@include google_fonts(Material Icons);
		@include google_fonts(Lato);
	};
	@include google_fonts(Roboto, 400 700);
	@include google_fonts(Open Sans, 400 700, italic normal);
	@include google_fonts(Raleway, 400 400i 500 700 700i );
	@include google_fonts(Lora, 400 700, $limit: 'F');
	/* End `google_fonts` --------------- */
}