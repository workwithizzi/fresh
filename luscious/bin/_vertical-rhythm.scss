// Vertical Rhythm Functions
// ------------------------------------------------------------------
// TODO: Add info, notes, feedback, and tests.


// ------------------------------------
// Classic Vertical-Rhythm Function
// ------------------------------------

// ----------------
// Info
// ----------------
$info-vr-classic: info-log(
	'The `vr` function takes a unitless number and calculates the vertical-rhythm for the element using `$base_font_size` (#{$base_font_size}) and `$base_line_height` (#{$base_line_height}).'
	'Type  : Function'
	'Params: $val -- Not required. Accepts only a unitless number. If empty, defaults to the base vertical-rhythm: ($base_font_size * $base_line_height).'
);

@mixin __info_vr-classic {
	@debug $info-vr-classic;
}


// ----------------
// Function
// ----------------
@function vr-classic($val: base) {
	// Calculate the base vertical-rhythm
	$base: convert_rem_ratio($base_line_height) * $base_font_size;

	// Make sure $base_font_size is unitless
	@if unitless($base_font_size) {
		@debug info-log('Your base font size CANNOT be a unitless number.'
		'Current value is (#{$base_font_size})'
		'@SEE: variable `$base_font_size`');
		@return 1000px;
	}

	// Return the base vertical-rhythm
	@else if $val == 'base' or $val == 0 {
		@return $base;
	}

	// If $val is any other number & unitless:
	@else if is-number($val) {
		@if unitless($val) {
			$step: $val + 1;
			@return $base * $step;
		}
		@else {
			@debug 'You used (#{$val}), you must use a unitless number.';
			@return 1000px;
		}
	// If all else fails, provide info about the function:
	} @else {
		@debug $info-vr-classic;
		@return 1000px;
	}

} // vr-classic



// ------------------------------------
// Baseline-Grid Vertical-Rhythm Function
// ------------------------------------

// ----------------
// Info
// ----------------
$info-vr-blgrid: info-log(
	'Need to add info for this function.'
);

@mixin __info_vr-blgrid {
	@debug $info-vr-blgrid;
}


// ----------------
// Function
// ----------------
@function vr-blgrid($val: base, $unit: rem) {
	// Calculate the base vertical-rhythm
	$base-ratio: convert_rem_ratio($base_line_height);

	@if $val == 'info' {
		@debug $info-vr-blgrid;
		@return 1000px;

	} @else if $val == 'base' or $val == 0 {
		@return $base-ratio + $unit;

	} @else if is-number($val) {
		$multiple: $baseline-grid * $val;
		$convert: convert_rem_ratio($multiple);
		@return ($base-ratio + $convert) + $unit;

	} @else {
		@debug $info-vr-blgrid;
		@return 1000px;
	}
}



// ------------------------------------
// VR Function
// ------------------------------------
@function vr($val: base, $function: blgrid, $unit: rem) {
	// Baseline-Grid VR function
	@if $function == 'blgrid' {
		@return vr-blgrid($val, $unit);
	}

	// Classic VR function
	@else {
		@return vr-classic($val);
	}

}




// ===================================================================
// Tests
// ===================================================================

// @mixin __test_vr {
// 	@if $output_test_message { @debug "[TESTING] `vr`"; }
// 	/* `vr` ----------------------------- */
// 	.vr-tests {
// 		.null      { line-height: vr();     }
// 		.base      { line-height: vr(base); }
// 		.step-1    { line-height: vr(1);    }
// 		.step-2    { line-height: vr(2);    }
// 		.step-3    { line-height: vr(3);    }
// 		.step-half { line-height: vr(.5);   }
//
// 		.errors {
// 			.info         { line-height: vr(info); }
// 			.not-unitless { line-height: vr(2rem); }
// 		}
// 	}
// 	/* End `vr` ------------------------- */
// }
//
// // TODO: Add test and info mixins to the global mixins
