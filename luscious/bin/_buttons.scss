// Luscious
// @since v0.0.1
//
// Button Mixins, Utility Classes, Tests
//
// sass-lint:disable class-name-format
// ===================================================================
// 2DO-LUS: REVIEW The implementation of all this.

// Reset button styles created by most browsers

@mixin __info_reset_html_button {
	@debug "[INFO]
	The `reset_html_button` mixin resets button styles
	created by most browsers.
	To see the output css, use `__test(reset_html_button)`.
	Type  : Standalone Mixin
	Params: none
	";
}

@mixin reset_html_button($info: null) {
	@if $info {
		@include __info_reset_html_button;
	}
	@else {
		button {
			@include disable_mouse_outline;
			appearance: none;
			cursor: pointer;
			padding: 0;
			border: 0;
			border-radius: none;
			background: transparent;
			line-height: 1;
			font-family: inherit;
		}
	}
}

// -------------------------------------

// Set Default Button Style
$button_default_style: primary !default;


// Helper Function for btn mixin (internal)
// Button Styles Map
// returns the key value from child map inside `$button_styles` map
// or falls back to the `default` child map if key value doesn't exist.
@function btn_styles($btn_name, $key) {
	$result: map-get(map-get($button_styles, $btn_name), $key);
	@if $result { @return $result; }
	@else {
		@return map-get(map-get($button_styles, default), $key);
	}
}

// -------------------------------------

// Create the button styling based on parameters
@mixin __info_btn {
	@debug "[INFO]
	The `btn` mixin sets up your styling for different button styles.
	Type  : Included Mixin
	Params:
	- $style  : Optional. Defaults to $button_default_style (`#{$button_default_style}`).
	-           You can set the default style in `settings/buttons`.
	-           Accepts any 1st level map in the `$button_styles` map.
	- $options: Optional. Order of options doesn't matter. Will accept:
	-           hollow : bg color transparent, color/border use the bg color.
	-           expand : epands button to 100% width with 0 left/right margin.
	-           disable: lowers opacity, disables mouse
	-           block  : makes the button `display: block`
	Alias :     `button`
	The rules that are applied will come from the 1st level map in
	`$button_styles` map. If there isn't a rule in that map, then
	it will fall back to the `defualt` key in the same map.
	";
}


@mixin btn( $style: $button_default_style, $mods...) {
	// 2DO-LUS: Figure out how to include info option without conflict if user adds and `info style` button.

	// Set `default` style to follow global config
	@if $style == 'default' { $style: $button_default_style; }

	// Default Button Mods are false
	$btn_is_hollow:   false;
	$btn_is_expanded: false;
	$btn_is_disabled: false;
	$btn_is_block:    false;
	$btn_is_dark:     false;

	// Button Mods (truthy statements) ---------------- //

	// Is Hollow
	@if index($mods, hollow) or $button_fill == 'hollow' {
		$btn_is_hollow: true;
	}
	// Is Epanded
	@if index($mods, expand) or index($mods, expanded) {
		$btn_is_expanded: true;
	}
	// Is Disabled
	@if index($mods, disable) or index($mods, disabled) {
		$btn_is_disabled: true;
	}
	// Is Block
	@if index($mods, block) {
		$btn_is_block: true;
	}

	// Base styles (changes per button style/mod) ---------------- //

	$color:        btn_styles($style, color);
	$bg_color:     btn_styles($style, background-color);
	$border_width: btn_styles($style, border-width);
	$border_style: btn_styles($style, border-style);
	$border_color: btn_styles($style, border-color);

	// Button Mods ---------------- //
	// If Hollow
	@if $btn_is_hollow {
		$color:        btn_styles($style, background-color);
		$bg_color:     transparent;
		$border_color: btn_styles($style, background-color);
	}
	// Is Expanded or Is Block
	@if $btn_is_expanded or $btn_is_block{
		display: block;
	} @else {
		display: inline-block;
	}

	// Border
	border: $border_width $border_style $border_color;
	// 2DO-LUS: Figure out override/fallback for hollow button borders


	// Output Styles ---------------- //
	// Base
	@include disable_mouse_outline;
	appearance: none;
	vertical-align: middle;

	color:   $color;

	margin: btn_styles($style, margin);
	// Is Expanded
	@if $btn_is_expanded {
		margin-right: 0;
		margin-left: 0;
		width: 100%;
	} @else {
		width: btn_styles($style, width);
	}

	background-color: $bg_color;
	padding:         btn_styles($style, padding);
	font-family:     btn_styles($style, font-family);
	font-size:       btn_styles($style, font-size);
	font-weight:     btn_styles($style, font-weight);
	line-height:     btn_styles($style, line-height);
	text-decoration: btn_styles($style, text-decoration);
	text-transform:  btn_styles($style, text-transform);
	text-align:      btn_styles($style, text-align);
	border-radius:   btn_styles($style, border-radius);
	transition:      btn_styles($style, transition);

	// Is Disabled
	@if $btn_is_disabled {
		opacity: $button_disabled_opacity;
		cursor: default;
	}
	// Is Not Disabled
	@else {
		cursor: pointer;
		&:hover {
			background-color: cl_function($button_hover, $bg_color, $button_hover_amount);
			border-color: cl_function($button_hover, $border-color, $button_hover_amount);
			color: cl_function($button_hover, $color, $button_hover_amount);
		}
	}

} // end: btn mixin

// Alias
@mixin __info_button {
	@include __info_btn;
}

// Alias
@mixin button($style: $button_default_style, $mods...) {
	@include btn($style, $mods...);
}


// -------------------------------------------------------------------
// Utility Classes
// -------------------------------------------------------------------

// Global Utility Prefix
$utility_class_prefix: 'u_' !default;

@mixin __info_btn_utility_classes {
	@debug "[INFO]
	The `btn_utility_classes` makes it so that you can output
	button utility classes from anywhere in the project.
	Type  : Standalone Mixin
	Params:
	- $prefix : Optional. Defaults to `btn` but can be any prefix you want.
	-           The $prefix is combined with the global prefix
	-           $utility_class_prefix (`#{$utility_class_prefix}`) to create `.#{$utility_class_prefix}btn`.
	Alias : `button_utility_classes`
	Main Classes:
	-       .u_btn (default)
	-       .u_btn_primary
	-       .u_btn_secondary,
	-       .u_btn_light,
	-       .u_btn_dark
	Modifiers : Each main class also has a modifier output:
	-       --hollow,
	-       --expanded,
	-       --block,
	-       --disabled,
	";
}


@mixin btn_utility_classes($prefix: btn) {
	@if $prefix == "info" {
		@include __info_btn_utility_classes;
	}
	@else {
		$btn: ".#{$utility_class_prefix}#{$prefix}";
		// Default
		#{$btn}           { @include button;                    }
		#{$btn}--hollow   { @include button(default, hollow);   }
		#{$btn}--expanded { @include button(default, expanded); }
		#{$btn}--block    { @include button(default, block);    }
		#{$btn}--disabled { @include button(default, disabled); }
		// Primary
		#{$btn}_primary           { @include button(primary);           }
		#{$btn}_primary--hollow   { @include button(primary, hollow);   }
		#{$btn}_primary--expanded { @include button(primary, expanded); }
		#{$btn}_primary--block    { @include button(primary, block);    }
		#{$btn}_primary--disabled { @include button(primary, disabled); }
		// Secondary
		#{$btn}_secondary           { @include button(secondary);           }
		#{$btn}_secondary--hollow   { @include button(secondary, hollow);   }
		#{$btn}_secondary--expanded { @include button(secondary, expanded); }
		#{$btn}_secondary--block    { @include button(secondary, block);    }
		#{$btn}_secondary--disabled { @include button(secondary, disabled); }
		// Dark
		#{$btn}_dark           { @include button(dark);           }
		#{$btn}_dark--hollow   { @include button(dark, hollow);   }
		#{$btn}_dark--expanded { @include button(dark, expanded); }
		#{$btn}_dark--block    { @include button(dark, block);    }
		#{$btn}_dark--disabled { @include button(dark, disabled); }
		// Light
		#{$btn}_light           { @include button(light);           }
		#{$btn}_light--hollow   { @include button(light, hollow);   }
		#{$btn}_light--expanded { @include button(light, expanded); }
		#{$btn}_light--block    { @include button(light, block);    }
		#{$btn}_light--disabled { @include button(light, disabled); }
	}
}

// Alias
@mixin __info_button_utility_classes {
	@include __info_btn_utility_classes;
}

@mixin button_utility_classes($prefix: btn) {
	@include btn_utility_classes($prefix);
}



// ===================================================================
// Tests
// ===================================================================

@mixin __test_reset_html_button {
	@if $output_test_message { @debug "[TESTING] `reset_html_button`"; }
	/* `reset_html_button` -------------- */
	/*
	@include reset_html_button;
	*/
	@include reset_html_button;
	/* End `reset_html_button` ---------- */
}


@mixin __test_btn {
	@if $output_test_message { @debug "[TESTING] `btn`"; }
	/* `btn` or `button` ---------------- */
	/*
	.test.btn {
		@include btn;
	}
	*/
	.test.btn {
		@include btn;
	}
	/*
	.test.btn.primary {
		@include btn(primary);
	}
	*/
	.test.btn.primary {
		@include btn(primary);
	}
	/*
	.test.btn.hollow {
		@include btn(default, hollow);
	}
	*/
	.test.btn.hollow {
		@include btn(default, hollow);
	}
	/*
	.test.btn.expand {
		@include btn(default, expand);
	}
	*/
	.test.btn.expand {
		@include btn(default, expand);
	}
	/*
	.test.btn.block {
		@include btn(default, block);
	}
	*/
	.test.btn.block {
		@include btn(default, block);
	}
	/*
	.test.btn.disable {
		@include btn(default, disable);
	}
	*/
	.test.btn.disable {
		@include btn(default, disable);
	}
	/* End `btn` or `button` ------------ */
}

// Alias
@mixin __test_button {
	@include __test_btn;
}


@mixin __test_btn_defaults {
	@if $output_test_message { @debug "[TESTING] `btn_defaults`"; }
	@include __test_btn;
	/* `btn_defaults` ------------------- */
	/*
	.test.btn.secondary {
		@include btn(secondary);
	}
	*/
	.test.btn.secondary {
		@include btn(secondary);
	}
	/*
	.test.btn.light {
		@include btn(light);
	}
	*/
	.test.btn.light {
		@include btn(light);
	}
	/*
	.test.btn.dark {
		@include btn(dark);
	}
	*/
	.test.btn.dark {
		@include btn(dark);
	}

	/* End `btn_defaults` --------------- */
}

// Alias
@mixin __test_button_defaults {
	@include __test_btn_defaults;
}


@mixin __test_btn_utility_classes {
	@if $output_test_message { @debug "[TESTING] `btn_utility_classes`"; }
	/* `btn_utility_classes` ------------ */
	/*
	@include btn_utility_classes;
	*/
	@include btn_utility_classes;
	/* End `btn_utility_classes` -------- */
}

// Alias
@mixin __test_button_utility_classes {
	@include __test_btn_utility_classes;
}
